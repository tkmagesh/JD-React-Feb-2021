What is React?
    Framework for building RIA
    What is RIA?

    RIA built using HTML + CSS + JS 
        => SPA (Single Page Application)

        Responsibilities 
            Handling User Interaction (C)
            Generating Response (V)
            Managing State (M)


    Maintainability
        Easy to CHANGE
            1. Roles & Responsibilities
                SRP (Single Responsibility Principle)

            2. 

        Fixing Bugs
        Adding new features
        Removing dead features
        Optimizing existing features

    class Employee {
        //public int id;
        private int _id;
        public void setId(value){

        }

    }

    Reactive (dumb) X Proactive (Knowledge)

    HTML vs JSX
    ===============
    HTML - "Only open tags" are allowed
    JSX - Every open tag must have the corresponding close tag

    HTML - 'for' attribute is allowed
    JSX - use 'htmlFor' instead

    HTML - 'class' attribute is allowed
    JSX - use 'className' instead


ES6 (EcmaScript 6, ES2015, ESNext)
    1. let
    2. const
    3. Array destructuring
    4. Rest operator (Array)
    5. Spread operator (Array)
    6. Object destructuring
    7. Rest operator (Object)
    8. Spread operator (Object)
    9. default arguments
    10. arrow functions
    11. template strings
    12. classes


In React
    Component = encapsulation of Presentation (JSX) + UI Behavior + UI State
              = Reusable
              = composable
              = SRP

    Application = composition of components

React Hooks
    Functions using which functional components can have
        - state
        - life cycle events
        etc
    Hook function names have to start with 'use'
    Builtin Hooks
        useState
        useEffect
        useReducer
        useMemo
        useCallback
    

    State
        UI logic
            Feel free to keep the data in the component state
            It is very unlikely other components might want to know when this data changes
        App logic
            It is very likely that this data might be needed in other parts of the application
            Dont maintain this in the component state (keep this outside the component)

            Flux Architecture
            Redux

    create-react-app
    npm, yarn

    to install yarn
        [sudo] npm install yarn -g

    go the folder where you want to create the application
    npx create-react-app bug-tracker-app


ES6 Modules
    - Everything defined in a js file is considered private to that file
    - Any public entity has to be explicity 'exported'
    - Any public entity from other js files have to explicitly 'imported' to use

/src
    /bugs
        /actions
        /components
        - index.js (BugTracker component)
    /reducers
        - bugsReducer.js
    /store
        - index.js
    -index.js


To install redux
    yarn add redux
    OR
    npm install redux


Redux middleware
    where we can write any logic that is common across all the actions


To serve data from a json file
    From the folder that has the data json file
        npx json-server db.json -p 3030


Projects Module (Assignment)
    implement the following only
        1. Adding new project (id, name, desc)
        2. List the projects

react-redux
    yarn add react-redux
    connect
        encapsulates the logic for extracting state (mapStateToProps), creating action dispatchers (mapDispatchToProps) & pass them as props to the component
        
    Provider
        Will make the state & dispatch available to the connected component


Assignment #1
    Populate the projects data in the dropdown box in 'bugEdit' component
    The bug created must have a 'projectId' attribute with the selected project

Assignment #2
    When the user selects a project in the 'Projects' component, display ONLY the bugs belonging that project

Async Operation
    An operation that will complete sometime in future and we dont wait for its completion
    